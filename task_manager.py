#!/usr/bin/env python3
"""
Python Task Manager Application
‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Command-Line Interface
"""

import json
import os
from datetime import datetime
from typing import List, Dict, Optional
import uuid


class Task:
    """Class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô"""
    
    def __init__(self, title: str, description: str, due_date: str):
        self.id = str(uuid.uuid4())[:8]  # ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° 8 ‡∏´‡∏•‡∏±‡∏Å
        self.title = title
        self.description = description
        self.due_date = due_date
        self.completed = False
        self.created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def to_dict(self) -> Dict:
        """‡πÅ‡∏õ‡∏•‡∏á Task object ‡πÄ‡∏õ‡πá‡∏ô dictionary"""
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'due_date': self.due_date,
            'completed': self.completed,
            'created_at': self.created_at
        }
    
    @classmethod
    def from_dict(cls, data: Dict) -> 'Task':
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Task object ‡∏à‡∏≤‡∏Å dictionary"""
        task = cls(data['title'], data['description'], data['due_date'])
        task.id = data['id']
        task.completed = data['completed']
        task.created_at = data['created_at']
        return task


class TaskManager:
    """Class ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    
    def __init__(self, data_file: str = "tasks.json"):
        self.data_file = data_file
        self.tasks: List[Task] = []
        self.load_tasks()
    
    def load_tasks(self) -> None:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.tasks = [Task.from_dict(task_data) for task_data in data]
                print(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô {len(self.tasks)} ‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            except (json.JSONDecodeError, KeyError) as e:
                print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
                self.tasks = []
        else:
            print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏á")
    
    def save_tasks(self) -> None:
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON"""
        try:
            data = [task.to_dict() for task in self.tasks]
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            print("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
    
    def add_task(self, title: str, description: str, due_date: str) -> bool:
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"""
        if not title.strip():
            print("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")
            return False
        
        if not self._validate_date(due_date):
            print("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD")
            return False
        
        task = Task(title.strip(), description.strip(), due_date)
        self.tasks.append(task)
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (ID: {task.id})")
        return True
    
    def _validate_date(self, date_string: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"""
        try:
            datetime.strptime(date_string, "%Y-%m-%d")
            return True
        except ValueError:
            return False
    
    def view_tasks(self, show_completed: bool = True) -> None:
        """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        if not self.tasks:
            print("üìù ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        pending_tasks = [task for task in self.tasks if not task.completed]
        completed_tasks = [task for task in self.tasks if task.completed]
        
        print("\n" + "="*60)
        print("üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("="*60)
        
        if pending_tasks:
            print(f"\nüîÑ ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ({len(pending_tasks)} ‡∏ä‡∏¥‡πâ‡∏ô):")
            print("-" * 40)
            for task in pending_tasks:
                status = "‚è∞" if self._is_overdue(task.due_date) else "üìÖ"
                print(f"{status} ID: {task.id}")
                print(f"   üìå ‡∏ä‡∏∑‡πà‡∏≠: {task.title}")
                print(f"   üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {task.description}")
                print(f"   üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: {task.due_date}")
                print(f"   üïí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {task.created_at}")
                print()
        
        if show_completed and completed_tasks:
            print(f"\n‚úÖ ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ({len(completed_tasks)} ‡∏ä‡∏¥‡πâ‡∏ô):")
            print("-" * 40)
            for task in completed_tasks:
                print(f"‚úÖ ID: {task.id}")
                print(f"   üìå ‡∏ä‡∏∑‡πà‡∏≠: {task.title}")
                print(f"   üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {task.description}")
                print(f"   üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: {task.due_date}")
                print()
    
    def _is_overdue(self, due_date: str) -> bool:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            due = datetime.strptime(due_date, "%Y-%m-%d")
            return due.date() < datetime.now().date()
        except ValueError:
            return False
    
    def mark_completed(self, task_id: str) -> bool:
        """‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        task = self._find_task_by_id(task_id)
        if not task:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô ID: {task_id}")
            return False
        
        if task.completed:
            print(f"‚ö†Ô∏è  ‡∏á‡∏≤‡∏ô ID: {task_id} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
            return False
        
        task.completed = True
        print(f"‚úÖ ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô '{task.title}' ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        return True
    
    def delete_task(self, task_id: str) -> bool:
        """‡∏•‡∏ö‡∏á‡∏≤‡∏ô"""
        task = self._find_task_by_id(task_id)
        if not task:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô ID: {task_id}")
            return False
        
        self.tasks.remove(task)
        print(f"üóëÔ∏è  ‡∏•‡∏ö‡∏á‡∏≤‡∏ô '{task.title}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        return True
    
    def _find_task_by_id(self, task_id: str) -> Optional[Task]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° ID"""
        for task in self.tasks:
            if task.id == task_id:
                return task
        return None
    
    def search_tasks(self, keyword: str = "", due_date: str = "") -> None:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"""
        results = []
        
        for task in self.tasks:
            match = True
            
            if keyword:
                keyword_lower = keyword.lower()
                if not (keyword_lower in task.title.lower() or 
                       keyword_lower in task.description.lower()):
                    match = False
            
            if due_date and match:
                if task.due_date != due_date:
                    match = False
            
            if match:
                results.append(task)
        
        if not results:
            print("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            return
        
        print(f"\nüîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ({len(results)} ‡∏ä‡∏¥‡πâ‡∏ô):")
        print("="*50)
        for task in results:
            status = "‚úÖ" if task.completed else "üîÑ"
            overdue = "‚è∞" if not task.completed and self._is_overdue(task.due_date) else ""
            print(f"{status}{overdue} ID: {task.id}")
            print(f"   üìå ‡∏ä‡∏∑‡πà‡∏≠: {task.title}")
            print(f"   üìù ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: {task.description}")
            print(f"   üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: {task.due_date}")
            print()


class TaskManagerCLI:
    """Command-Line Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Task Manager"""
    
    def __init__(self):
        self.task_manager = TaskManager()
    
    def display_menu(self) -> None:
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å"""
        print("\n" + "="*50)
        print("üìã Python Task Manager")
        print("="*50)
        print("1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")
        print("2. ‡∏î‡∏π‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        print("3. ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        print("4. ‡∏•‡∏ö‡∏á‡∏≤‡∏ô")
        print("5. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô")
        print("6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        print("7. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        print("="*50)
    
    def get_user_input(self, prompt: str) -> str:
        """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
        return input(f"{prompt}: ").strip()
    
    def add_task_interactive(self) -> None:
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
        print("\nüìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")
        print("-" * 30)
        
        title = self.get_user_input("‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô")
        if not title:
            print("‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")
            return
        
        description = self.get_user_input("‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        due_date = self.get_user_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î (YYYY-MM-DD)")
        
        if self.task_manager.add_task(title, description, due_date):
            self.task_manager.save_tasks()
    
    def mark_completed_interactive(self) -> None:
        """‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
        print("\n‚úÖ ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        print("-" * 40)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
        pending_tasks = [task for task in self.task_manager.tasks if not task.completed]
        if not pending_tasks:
            print("üìù ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
            return
        
        print("‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£:")
        for task in pending_tasks:
            overdue = "‚è∞" if self.task_manager._is_overdue(task.due_date) else "üìÖ"
            print(f"  {overdue} {task.id}: {task.title}")
        
        task_id = self.get_user_input("\n‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        if self.task_manager.mark_completed(task_id):
            self.task_manager.save_tasks()
    
    def delete_task_interactive(self) -> None:
        """‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
        print("\nüóëÔ∏è  ‡∏•‡∏ö‡∏á‡∏≤‡∏ô")
        print("-" * 20)
        
        if not self.task_manager.tasks:
            print("üìù ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
            return
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        print("‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
        for task in self.task_manager.tasks:
            status = "‚úÖ" if task.completed else "üîÑ"
            print(f"  {status} {task.id}: {task.title}")
        
        task_id = self.get_user_input("\n‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
        confirm = self.get_user_input("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö? (y/N)")
        
        if confirm.lower() in ['y', 'yes']:
            if self.task_manager.delete_task(task_id):
                self.task_manager.save_tasks()
        else:
            print("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏á‡∏≤‡∏ô")
    
    def search_tasks_interactive(self) -> None:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
        print("\nüîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô")
        print("-" * 20)
        
        keyword = self.get_user_input("‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        due_date = self.get_user_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î (YYYY-MM-DD) (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)")
        
        self.task_manager.search_tasks(keyword, due_date)
    
    def run(self) -> None:
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        print("üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Python Task Manager!")
        
        while True:
            self.display_menu()
            choice = self.get_user_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-7)")
            
            if choice == "1":
                self.add_task_interactive()
            elif choice == "2":
                self.task_manager.view_tasks()
            elif choice == "3":
                self.mark_completed_interactive()
            elif choice == "4":
                self.delete_task_interactive()
            elif choice == "5":
                self.search_tasks_interactive()
            elif choice == "6":
                self.task_manager.save_tasks()
            elif choice == "7":
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Python Task Manager!")
                break
            else:
                print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-7")
            
            input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        cli = TaskManagerCLI()
        cli.run()
    except KeyboardInterrupt:
        print("\n\nüëã ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


if __name__ == "__main__":
    main()
